
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;
using System.Text.Json;


namespace cfg.DataBase
{
public partial class TbConstants
{

     private readonly Constants _data;

     public Constants Data => _data;

    public TbConstants(JsonElement _buf)
    {
        int n = _buf.GetArrayLength();
        if (n != 1) throw new SerializationException("table mode=one, but size != 1");
        _data = Constants.DeserializeConstants(_buf[0]);
    }


    /// <summary>
    /// 默认连发间隔
    /// </summary>
     public float BurstInterval => _data.BurstInterval;
    /// <summary>
    /// 默认玩家生命
    /// </summary>
     public float PlayerHealth => _data.PlayerHealth;
    /// <summary>
    /// 默认玩家速度
    /// </summary>
     public float PlayerSpeed => _data.PlayerSpeed;
    /// <summary>
    /// 默认玩家伤害
    /// </summary>
     public float PlayerDamage => _data.PlayerDamage;
    /// <summary>
    /// 默认玩家射击速度
    /// </summary>
     public float PlayerShootSpeed => _data.PlayerShootSpeed;
    /// <summary>
    /// 默认玩家子弹速度
    /// </summary>
     public float PlayerBulletSpeed => _data.PlayerBulletSpeed;
    /// <summary>
    /// 默认玩家武器散布
    /// </summary>
     public float PlayerShootSpread => _data.PlayerShootSpread;
    /// <summary>
    /// 默认玩家打中后对目标的击退
    /// </summary>
     public float PlayerKnockBack => _data.PlayerKnockBack;
    /// <summary>
    /// 默认玩家BurstFire
    /// </summary>
     public float PlayerBurstFire => _data.PlayerBurstFire;
    /// <summary>
    /// 默认玩家子弹大小
    /// </summary>
     public float PlayerBulletSize => _data.PlayerBulletSize;
    /// <summary>
    /// 默认玩家子弹退化速度
    /// </summary>
     public float PlayerBulletDegeneration => _data.PlayerBulletDegeneration;
    /// <summary>
    /// 默认射击后坐力
    /// </summary>
     public float PlayerRecoil => _data.PlayerRecoil;
    /// <summary>
    /// 默认子弹数量
    /// </summary>
     public float PlayerBulletCount => _data.PlayerBulletCount;
    /// <summary>
    /// 默认爆炸伤害
    /// </summary>
     public float PlayerBlastDamage => _data.PlayerBlastDamage;
    /// <summary>
    /// 默认爆炸半径
    /// </summary>
     public float PlayerBlastRadius => _data.PlayerBlastRadius;
    /// <summary>
    /// 最大等级
    /// </summary>
     public float MaxLevel => _data.MaxLevel;
    /// <summary>
    /// 最大同屏怪物数量
    /// </summary>
     public int MaxMobCount => _data.MaxMobCount;
    
    public void ResolveRef(Tables tables)
    {
        _data.ResolveRef(tables);
    }
}

}

