[gd_scene load_steps=6 format=3 uid="uid://bharugg35n758"]

[sub_resource type="GDScript" id="GDScript_xf6ig"]
script/source = "@tool
extends Node2D

@export var mesh : MeshInstance2D

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	pass # Replace with function body.


func _process(delta: float) -> void:
	#(mesh.material as ShaderMaterial).set_shader_parameter(\"end_pos\", get_local_mouse_position())
	pass
"

[sub_resource type="Shader" id="Shader_vrpj1"]
code = "shader_type canvas_item;

uniform float width : hint_range(0.0, 30.0, 0.1) = 5.0f;
uniform vec2 start_pos = vec2(0.0);
uniform vec2 end_pos = vec2(0.0);

vec3 permute_33(vec3 x) {
    return mod(((x * 34.0) + 1.0) * x, 289.0);
}

float snoise(vec2 v) {
    const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439);
    vec2 i = floor(v + dot(v, C.yy));
    vec2 x0 = v - i + dot(i, C.xx);
    vec2 i1;
    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
    vec4 x12 = x0.xyxy + C.xxzz;
    x12.xy -= i1;
    i = mod(i, 289.0);
    vec3 p = permute_33(permute_33(i.y + vec3(0.0, i1.y, 1.0)) + i.x + vec3(0.0, i1.x, 1.0));
    vec3 m = max(0.5 - vec3(dot(x0, x0), dot(x12.xy, x12.xy), dot(x12.zw, x12.zw)), 0.0);
    m = m * m;
    m = m * m;
    vec3 x = 2.0 * fract(p * C.www) - 1.0;
    vec3 h = abs(x) - 0.5;
    vec3 ox = floor(x + 0.5);
    vec3 a0 = x - ox;
    m *= 1.79284291400159 - 0.85373472095314 * (a0 * a0 + h * h);
    vec3 g;
    g.x = a0.x * x0.x + h.x * x0.y;
    g.yz = a0.yz * x12.xz + h.yz * x12.yw;
    return 130.0 * dot(m, g);
}

float fbm(in vec2 x, in float H, int numOctaves) {
    float G = exp2(-H);
    float f = 1.0;
    float a = 1.0;
    float t = 0.0;
    for(int i = 0; i < numOctaves; i++) {
        t += a * snoise(f * x);
        f *= 2.0;
        a *= G;
    }
    return t;
}

void vertex() {
	float l = length(end_pos);
	VERTEX.x = UV.x * normalize(end_pos).x * l;
	VERTEX.y = (UV.y - 0.5f) * width;
	float uv_scale = l / 50.0f;
	vec2 pos = vec2(-TIME * 22.25f + UV.x * uv_scale, TIME * 0.23f);
	VERTEX.y += mix(0.0f, normalize(end_pos).y * l, UV.x * UV.x);
	VERTEX.y += fbm(pos, 0.15f, 2) * 13.0f * smoothstep(0.5, 0.4, abs(UV.x - 0.5));
	VERTEX.xy += start_pos;
}

void fragment() {
	COLOR.rgb *= 10.0f;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_523nr"]
shader = SubResource("Shader_vrpj1")
shader_parameter/width = 4.4
shader_parameter/start_pos = Vector2(0, 0)
shader_parameter/end_pos = Vector2(100, 100)

[sub_resource type="PlaneMesh" id="PlaneMesh_7hx56"]
size = Vector2(0, 0)
subdivide_width = 100
orientation = 2

[sub_resource type="Environment" id="Environment_m2pd7"]
background_mode = 3
glow_enabled = true

[node name="Bolt" type="Node2D" node_paths=PackedStringArray("mesh")]
script = SubResource("GDScript_xf6ig")
mesh = NodePath("MeshInstance2D")

[node name="MeshInstance2D" type="MeshInstance2D" parent="."]
modulate = Color(0, 0.4, 1, 1)
material = SubResource("ShaderMaterial_523nr")
mesh = SubResource("PlaneMesh_7hx56")

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_m2pd7")
